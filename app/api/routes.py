from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.api import crud
from app.api.crud import update_user
from app.api.schemas import UserOut, UserUpdate
from app.db.session import get_db

router = APIRouter(
    prefix="/users",
    tags=["üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∫–∞–∫ —á—ë—Ä–Ω–∞—è –¥—ã—Ä–∞"}},
)


@router.get(
    "/",
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 100 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.",
    response_model=list[UserOut],
)
async def get_users(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
):
    return await crud.get_users(db, skip, limit)


@router.get(
    "/{user_id}",
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî 404.",
    response_model=UserOut,
)
async def get_user(user_id: int, db: AsyncSession = Depends(get_db)):
    user = await crud.get_user(db, user_id)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return user


@router.patch(
    "/{user_id}",
    summary="–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç null-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.",
    response_model=UserOut,
)
async def patch_update_user(
    user_id: int, user_update: UserUpdate, db: AsyncSession = Depends(get_db)
):
    user = await crud.get_user(db, user_id)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    data = user_update.model_dump(exclude_unset=True)
    return await update_user(db, user, data)
