from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

from app.core.config import settings
from app.db.session import asyncSessionLocal

bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


class Form(StatesGroup):
    name = State()
    surname = State()
    patronymic = State()
    business = State()


def main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task")],
            [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω –∫–ª—É–±–∞", callback_data="shop")],
            [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        ]
    )


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    from app.api.crud import get_user_by_tg

    await state.clear()
    async with asyncSessionLocal() as db:
        user = await get_user_by_tg(db, tg_id=message.from_user.id)
        if user:
            return await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{user.first_name}</b>! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:",
                reply_markup=main_menu(),
            )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É. –ù–∞–∂–º–∏ '–ì–æ—Ç–æ–≤' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤'.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤")]], resize_keyboard=True
        ),
    )


@dp.message(F.text.lower() == "–≥–æ—Ç–æ–≤")
async def begin_registration(message: Message, state: FSMContext):
    async with asyncSessionLocal() as db:
        from app.api.crud import get_user_by_tg

        user = await get_user_by_tg(db, tg_id=message.from_user.id)
        if user:
            return await fallback(message)

    await state.set_state(Form.name)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")


@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(Form.surname)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")


@dp.message(Form.surname)
async def process_surname(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(Form.patronymic)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ.")


@dp.message(Form.patronymic)
async def process_patronymic(message: Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await state.set_state(Form.business)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç–µ."
    )


@dp.message(Form.business)
async def process_business(message: Message, state: FSMContext):
    from app.api.crud import get_user_by_tg, update_user, create_user

    await state.update_data(business=message.text)
    data = await state.get_data()
    async with asyncSessionLocal() as db:
        existing = await get_user_by_tg(db, tg_id=message.from_user.id)
        if existing:
            await update_user(db, existing, data)
        else:
            await create_user(db, tg_id=message.from_user.id, **data)
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç. "
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
        "–∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!",
        reply_markup=main_menu(),
    )
    await state.clear()


@dp.callback_query(F.data == "contacts")
async def show_contacts(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")]]
    )
    await callback.message.edit_text(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
        "üìß Email: support@laribaclub.com\n"
        "üí¨ Telegram: @manager\n"
        "üåê –°–∞–π—Ç: laribaclub.com\n\n"
        "–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤",
        reply_markup=kb,
    )


@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:", reply_markup=main_menu()
    )


@dp.callback_query(F.data == "profile")
async def profile(callback: CallbackQuery):
    await callback.answer(
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", show_alert=True
    )


@dp.callback_query(F.data == "task")
async def task(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", show_alert=True)


@dp.callback_query(F.data == "shop")
async def shop(callback: CallbackQuery):
    await callback.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∞–∑–∏–Ω –∫–ª—É–±–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", show_alert=True)


@dp.message()
async def fallback(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="menu")]]
    )
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=kb,
    )
